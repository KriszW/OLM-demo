@page "/machine/{MachineID}"
@using Store.Machines.Machine
@using OLM.Blazor.WASM.Store.Machines.Machine.Actions

@inherits FluxorComponent

@inject IState<MachineState> _state
@inject IDispatcher _dispatcher

@if (_state.Value.IsLoading == false)
{
    @if (_state.Value.Response != default)
    {
        <div class="bundle-tables machine">

            @if (_state.Value.Response.Model.Latest != default)
            {
                <LatestBundleData Bundle="_state.Value.Response.Model.Latest" />
            }
            else
            {
                @foreach (var item in _state.Value.Response.Errors.Errors)
                {
                    @if (item.FieldName == "latest")
                    {
                        <div style="grid-column:1/3">
                            <BundleIsEmptyError ErrorMSG=@item.ErrorMSG />
                        </div>
                    }
                }
            }

            @if (_state.Value.Response.Model.Daily != default)
            {
                <DailyBundleData Bundle="_state.Value.Response.Model.Daily" />
            }
            else
            {
                @foreach (var item in _state.Value.Response.Errors.Errors)
                {
                    @if (item.FieldName == "daily")
                    {
                        <BundleIsEmptyError ErrorMSG=@item.ErrorMSG />
                    }
                }
            }

            @if (_state.Value.Response.Model.Weekly != default)
            {
                <WeeklyBundleData Bundle="_state.Value.Response.Model.Weekly" />
            }
            else
            {
                @foreach (var item in _state.Value.Response.Errors.Errors)
                {
                    @if (item.FieldName == "weekly")
                    {
                        <BundleIsEmptyError ErrorMSG=@item.ErrorMSG />
                    }
                }
            }
        </div>
    }
}
else
{
    <AlwaysSpinner />
}


@code {
    [Parameter]
    public string MachineID { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _dispatcher.Dispatch(new StartFetchMachineDataAction(MachineID));
    }
}
