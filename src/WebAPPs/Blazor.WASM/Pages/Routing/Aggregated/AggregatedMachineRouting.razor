@page "/routing/aggregated/{MachineID}"

@using OLM.Shared.Models.Routing.SharedAPIModels.Response
@using OLM.Blazor.WASM.Pages.Routing.Components

@inject IRoutingRepository RoutingRepo

@if (_isLoading == false)
{
    @if (model != default)
    {
        <div class="machinerouting-container text-center">
        <span class="machinerouting-title" style="font-size:4rem;">@MachineID szabászsor routingja</span>

        @if (LoadToRows == false)
        {


            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <div class="text-center" style="font-size:2.5rem">Napi</div>
                        <RoutingChart FixHeight="Height" HorizontalCount="1" ChartID="@($"routing-aggregated-{MachineID}-daily")" HeightDifference="titleHeightDiff" Data="Aggregate(model.Daily.Data)" />
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <div class="text-center" style="font-size:2.5rem">Heti</div>
                        <RoutingChart FixHeight="Height" HorizontalCount="1" ChartID="@($"routing-aggregated-{MachineID}-weekly")" HeightDifference="titleHeightDiff" Data="Aggregate(model.Weekly.Data)" />
                    </div>
                </div>
            </div>
        }
        else
        {
            var horCount = (model.Daily.Data.Count() + model.Weekly.Data.Count());

            <div class="text-center" style="font-size:2.5rem">Napi</div>
            <RoutingChart FixHeight="Height" HorizontalCount="horCount" ChartID="@($"routing-aggregated-{MachineID}-daily")" HeightDifference="titleHeightDiff" Data="Aggregate(model.Daily.Data)" />
            <div class="text-center" style="font-size:2.5rem">Heti</div>
            <RoutingChart FixHeight="Height" HorizontalCount="horCount" ChartID="@($"routing-aggregated-{MachineID}-weekly")" HeightDifference="titleHeightDiff" Data="Aggregate(model.Weekly.Data)" />
        }

    </div>

    }
    else
    {
        <DataFetchError ErrorMSG="@errMSG" />
    }

}
else
{
    <AlwaysSpinner />
}


@code{
    private const int titleHeightDiff = 240;

    private bool _isLoading = true;
    private AggregatedRoutingViewModel model;
    private string errMSG;

    [Parameter]
    public string MachineID { get; set; }

    [Parameter]
    public bool LoadToRows { get; set; }

    [Parameter]
    public int? Height { get; set; } = 500;

    protected override async Task OnParametersSetAsync()
    {
        var response = await RoutingRepo.Fetch(MachineID);

        if (response.Success) model = response.Model;
        else errMSG = response.Message;

        _isLoading = false;
    }

    private RoutingsDataResponseViewModel Aggregate(IEnumerable<RoutingsDataResponseViewModel> models)
    {
        return new RoutingsDataResponseViewModel
        {
            Dimension = "",
            ActualRouting = models.Sum(m => m.ActualRouting),
            ExpectedRouting = models.Sum(m => m.ExpectedRouting)
        };
    }
}