@page "/currencies/rates/{ISOCode}"

@using OLM.Blazor.WASM.Store.Manager.MoneyExchangeRateManager.CurrencyExchangeRates
@using OLM.Blazor.WASM.Store.Manager.MoneyExchangeRateManager.CurrencyExchangeRates.Actions
@using OLM.Shared.Models.MoneyExchangeRate.SharedAPIModels
@using OLM.Shared.Models.MoneyExchangeRate.SharedAPIModels.Controllers.ExchangeRate
@using OLM.Blazor.WASM.Services.Repositories.Abstractions.MoneyExchangeRate

@attribute [Authorize]
@inherits FluxorComponent

@inject IState<ExchangeRateManagerState> State
@inject IDispatcher Dispatcher
@inject IExchangeRateRepository ExchangeRateRepository
@inject IMatToaster Toaster
@inject NavigationManager NavManager

@if (State.Value.IsLoading == false)
{
    if (State.Value.Errors == default)
    {
        if (State.Value.Data != default)
        {
            if (State.Value.Data.Data != default)
            {
                <h1>@ISOCode valutához az átváltási ráták</h1>
                <MatButton Raised="true" TrailingIcon="@MatIconNames.Add" OnClick="UploadNewPrice">Új ráta feltöltése a @ISOCode valutához</MatButton>

                <MatTable Items="State.Value.Data.Data"
                          PageSize="State.Value.PageSize"
                          Striped="true"
                          AllowSelection="false"
                          ShowPaging="false"
                          Class="text-center">

                    <MatTableHeader>
                        <th>Átváltandó valuta</th>
                        <th>Ráta</th>
                        <th>Akciók</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.DestISOCode</td>
                        <td>@context.Rate</td>
                        <td class="text-left">
                            <MatButton Raised="true" Label="" OnClick="@(() => EditPrice(context) )" Icon="@MatIconNames.Edit" />
                            <MatButton Raised="true" Label="" OnClick="@(()=> DeletePrice(context))" Icon="@MatIconNames.Delete" />
                        </td>
                    </MatTableRow>
                </MatTable>

                <MatPaginator Length="(int)State.Value.Data.TotalItemCount"
                              PageSize="State.Value.PageSize"
                              Page="PageChanged"
                              Label=""
                              PageLabel="" />
            }
            else
            {
                <DataFetchError ErrorMSG="@($"Az adatbázisba nincs átváltási ráta feltöltve {ISOCode}")" />
            }


        }
        else
        {
            <DataFetchError ErrorMSG="@($"Nincsen feltöltve átváltási ráta a {ISOCode} valutához az adatbázisba")" />
        }
    }
    else
    {
        <DataFetchError ErrorMSG="@State.Value.Errors.Errors.FirstOrDefault()?.ErrorMSG" />
    }
}
else
{
    <AlwaysSpinner />
}

@if (State.Value.SelectedModelForDelete != default)
{
    <MatDialog @bind-IsOpen="isDeleteDialogOpen">
        <MatDialogTitle>
            A '@State.Value.SelectedModelForDelete.DestISOCode' ráta törlése a @ISOCode valutához
        </MatDialogTitle>
        <MatDialogContent>
            A törlés végleges, már nem lesz lehetőséged visszavonni a 'Törlés' gomb megnyomása után
        </MatDialogContent>
        <MatDialogActions>
            <MatButton TrailingIcon="@MatIconNames.Cancel" OnClick="CancelDelete">Mégsem</MatButton>
            <MatButton TrailingIcon="@MatIconNames.Delete" OnClick="SubmitDelete">Törlés</MatButton>
        </MatDialogActions>
    </MatDialog>
}

@if (State.Value.ModelForEdit != default)
{
    <MatDialog @bind-IsOpen="isModifyDialogOpen">
        <MatDialogTitle>
            @($"{(State.Value.ModelForEdit.ID == default ? "Új ráta hozzáadása" : $"'{State.Value.ModelForEdit.DestISOCode}' ráta módosítása")}")
        </MatDialogTitle>
        <EditForm Model="State.Value.ModelForEdit" OnSubmit="() => Task.CompletedTask">
            <ServerSideValidator @ref="_serverSideValidator" />
            <MatDialogContent>
                <MatTextField Label="Ráta ISO kódja" @bind-Value="@State.Value.ModelForEdit.DestISOCode" TValue="string" />
                <ValidationMessage For="@(()=> State.Value.ModelForEdit.DestISOCode)" />

                <MatNumericUpDownField Label="Ráta"
                                       DecimalPlaces="10"
                                       @bind-Value="@State.Value.ModelForEdit.Rate"
                                       TValue="decimal" />
                <ValidationMessage For="@(()=> State.Value.ModelForEdit.Rate)" />
            </MatDialogContent>
            <MatDialogActions>
                <MatButton TrailingIcon="@MatIconNames.Cancel" OnClick="CancelModify">Mégsem</MatButton>
                <MatButton TrailingIcon="@($"{(State.Value.ModelForEdit.ID == default ? MatIconNames.Add : MatIconNames.Edit )}")"
                           OnClick="SubmitEdit">
                    @($"{(State.Value.ModelForEdit.ID == default ? "Feltöltés" : "Módosítás")}")
                </MatButton>
            </MatDialogActions>
        </EditForm>
    </MatDialog>
}

<MatButton Raised="true" Icon="@MatIconNames.Navigate_before" OnClick="() => NavigateBackToCurrencies()"> Vissza </MatButton>

@code{

    [Parameter]
    public string ISOCode { get; set; }

    private EditContext _editContext;
    private ServerSideValidator _serverSideValidator;
    private bool isDeleteDialogOpen = false;
    private bool isModifyDialogOpen = false;

    private void CancelDelete() => isDeleteDialogOpen = false;
    private void CancelModify()
    {
        isModifyDialogOpen = false;
        UpdateItems();
    }

    private void NavigateBackToCurrencies()
    {
        NavManager.NavigateTo("/currencies");
    }

    private void PageChanged(MatPaginatorPageEvent e)
    {
        Dispatcher.Dispatch(new ExchangeRatePageIndexChangedAction(e.PageIndex));
        Dispatcher.Dispatch(new ExchangeRatePageSizeChangedAction(e.PageSize));

        Dispatcher.Dispatch(new LoadExchangeRatesAction(ISOCode, State.Value.PageIndex, State.Value.PageSize));
    }

    private void UploadNewPrice()
    {
        Dispatcher.Dispatch(new ChangeExchangeRateModelAction(new ExchangeRateViewModel()));

        isModifyDialogOpen = true;
    }

    private void EditPrice(ExchangeRateViewModel model)
    {
        Dispatcher.Dispatch(new ChangeExchangeRateModelAction(model));

        isModifyDialogOpen = true;
    }

    private async Task SubmitEdit()
    {
        var isAddNewModel = State.Value.ModelForEdit.ID == default;

        if (isAddNewModel == true)
        {
            await UploadNewModel(State.Value.ModelForEdit);
        }
        else
        {
            await EditNewModel(State.Value.ModelForEdit);
        }
    }

    private async Task UploadNewModel(ExchangeRateViewModel model)
    {
        var uploadModel = new UploadNewExchangeRateForISOCodeViewModel
        {
            Model = model,
            SourceISOCode = ISOCode
        };

        var result = await ExchangeRateRepository.Upload(uploadModel);

        if (result.Success == true)
        {
            Toaster.Add($"Sikeresen feltöltötted a '{model.DestISOCode}' rátát a {ISOCode} valutához", MatToastType.Success, $"Sikeres feltöltés");
            isModifyDialogOpen = false;
            UpdateItems();
        }
        else
        {
            _serverSideValidator.DisplayErrors(result.Errors);
        }
    }

    private async Task EditNewModel(ExchangeRateViewModel model)
    {
        var result = await ExchangeRateRepository.Modify(ISOCode, model);

        if (result.Success == true)
        {
            Toaster.Add($"Sikeresen módosítottad a '{model.DestISOCode}' rátát a {ISOCode} valutához", MatToastType.Success, $"Sikeres módosítás");
            isModifyDialogOpen = false;
            UpdateItems();
        }
        else
        {
            _serverSideValidator.DisplayErrors(result.Errors);
        }
    }

    private void DeletePrice(ExchangeRateViewModel model)
    {
        isDeleteDialogOpen = true;
        Dispatcher.Dispatch(new ExchangeRateModelForDeletingSetAction(model));
    }

    private async Task SubmitDelete()
    {
        var result = await ExchangeRateRepository.Delete(State.Value.SelectedModelForDelete.ID.GetValueOrDefault());

        if (result.Success == true)
        {
            Toaster.Add($"Sikeresen törölted a '{State.Value.SelectedModelForDelete.DestISOCode}' rátát {ISOCode} valutához", MatToastType.Success, $"Sikeres törlés");
        }
        else
        {
            Toaster.Add($"A törlés nem sikerült, mert: {result.Message}", MatToastType.Danger, "Sikertelen törlés");
        }

        isDeleteDialogOpen = false;
        UpdateItems();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new LoadExchangeRatesAction(ISOCode, State.Value.PageIndex, State.Value.PageSize));
    }

    private void UpdateItems() => Dispatcher.Dispatch(new LoadExchangeRatesAction(ISOCode, State.Value.PageIndex, State.Value.PageSize));
}